<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
             xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd">

    <!--配置静态资源放行-->
    <http pattern="/css/**" security="none"/>
    <http pattern="/img/**" security="none"/>
    <http pattern="/js/**" security="none"/>
    <http pattern="/plugins/**" security="none"/>

    <!--用户注册和获取验证码的请求放行-->
    <http pattern="/register.html" security="none"/>
    <http pattern="/user/add.do" security="none"/>
    <http pattern="/user/sendCode.do" security="none"/>
    <http pattern="../../webapp/home-person-collect.html" security="none"/>

    <!--   entry-point-ref  配置CAS入口点引用 -->
    <http use-expressions="false" entry-point-ref="casProcessingFilterEntryPoint">
        <!--拦截路径和用户的角色-->
        <intercept-url pattern="/**" access="ROLE_USER"/>
        <!--跨域请求伪造-->
        <csrf disabled="true"/>

        <!-- custom-filter为过滤器， position 表示将过滤器放在指定的位置上，before表示放在指定位置之前  ，after表示放在指定的位置之后  -->
        <custom-filter ref="casAuthenticationFilter" position="CAS_FILTER"/>
        <custom-filter ref="requestSingleLogoutFilter" before="LOGOUT_FILTER"/>
        <custom-filter ref="singleLogoutFilter" before="CAS_FILTER"/>
    </http>

    <!-- CAS入口点 开始 -->
    <beans:bean id="casProcessingFilterEntryPoint"
                class="org.springframework.security.cas.web.CasAuthenticationEntryPoint">
        <!-- 单点登录服务器登录URL -->
        <beans:property name="loginUrl" value="http://192.168.200.128:9100/cas/login"/>
        <!--原服务的地址-->
        <beans:property name="serviceProperties" ref="serviceProperties"/>
    </beans:bean>

    <!--原服务地址 因为原服务地址会在认证和校验的时候会被使用两次,所以提取出来,为了引用方便-->
    <beans:bean id="serviceProperties" class="org.springframework.security.cas.ServiceProperties">
        <!--service 配置自身工程的根地址+/login/cas   -->
        <beans:property name="service" value="http://localhost:9104/login/cas"/>
    </beans:bean>
    <!-- CAS入口点 结束 -->


    <!-- 认证过滤器 开始 -->
    <beans:bean id="casAuthenticationFilter" class="org.springframework.security.cas.web.CasAuthenticationFilter">
        <beans:property name="authenticationManager" ref="authenticationManager"/>
    </beans:bean>
    <!-- 认证管理器 -->
    <authentication-manager alias="authenticationManager">
        <authentication-provider ref="casAuthenticationProvider">
        </authentication-provider>
    </authentication-manager>
    <!-- 认证提供者 包括认证和票据校验 -->
    <beans:bean id="casAuthenticationProvider"
                class="org.springframework.security.cas.authentication.CasAuthenticationProvider">
        <beans:property name="authenticationUserDetailsService">
            <beans:bean class="org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper">
                <!--授权-->
                <beans:constructor-arg ref="userDetailsService"/>
            </beans:bean>
        </beans:property>
        <beans:property name="serviceProperties" ref="serviceProperties"/>

        <!-- ticketValidator 票据验证器 -->
        <beans:property name="ticketValidator">
            <beans:bean class="org.jasig.cas.client.validation.Cas20ServiceTicketValidator">
                <beans:constructor-arg index="0" value="http://192.168.200.128:9100/cas"/>
            </beans:bean>
        </beans:property>
        <beans:property name="key" value="an_id_for_this_auth_provider_only"/>
    </beans:bean>

    <!-- 认证类 该类中给用户进行授权 -->
    <beans:bean id="userDetailsService" class="cn.ithcast.core.service.UserDetailServiceImpl">
        <beans:property name="userService" ref="userService"/>
    </beans:bean>
    <!--引用dubbo 服务-->
    <!--由于要使用SellerService服务,属于两个Tomcat,所以安全框架里面也要配置dubbox-->
    <dubbo:application name="pinyougou-user-web"/>
    <dubbo:registry address="zookeeper://192.168.200.128:2181"/>
    <!--reference:引用,表示我要使用哪个服务接口-->
    <dubbo:reference id="userService" interface="cn.ithcast.core.service.UserService"/>



    <!-- 认证过滤器 结束 -->

    <!-- 单点登出  开始 清空服务端的session -->
    <beans:bean id="singleLogoutFilter" class="org.jasig.cas.client.session.SingleSignOutFilter"/>

    <!-- 经过此配置，当用户在地址栏输入本地工程 /logout/cas 就会执行登出动作 -->
    <beans:bean id="requestSingleLogoutFilter"
                class="org.springframework.security.web.authentication.logout.LogoutFilter">
        <!--登出的路径 这里只需要写端口号,因为默认访问的是home-index.html,会自动作出拼接-->
        <beans:constructor-arg value="http://192.168.200.128:9100/cas/logout?service=http://localhost:9104"/>
        <beans:constructor-arg>
            <beans:bean class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler"/>
        </beans:constructor-arg>

        <beans:property name="filterProcessesUrl" value="/logout/cas"/>
    </beans:bean>
    <!-- 单点登出  结束 -->

</beans:beans>